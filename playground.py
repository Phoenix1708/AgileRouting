# from __future__ import print_function
#
# __author__ = 'hydezhang'
#
# import time
# import urllib2
# import weather   # Bindings generated by PyXB
# import pyxb.utilities.domutils as domutils
#
# uri = 'http://wsf.cdyne.com/WeatherWS/Weather.asmx/GetCityForecastByZIP?ZIP=55113'
# xml = urllib2.urlopen(uri).read()
# doc = domutils.StringToDOM(xml)
# fc_return = weather.CreateFromDOM(doc.documentElement)
# if fc_return.Success:
# print('Weather forecast for %s, %s:' % (fc_return.City, fc_return.State))
# for fc in fc_return.ForecastResult.Forecast:
# when = time.strftime('%A, %B %d %Y', fc.Date.timetuple())
#         outlook = fc.Desciption # typos in WSDL left unchanged
#         low = fc.Temperatures.MorningLow
#         high = fc.Temperatures.DaytimeHigh
#         print('  %s: %s, from %s to %s' % (when, outlook, low, high))

'''
Sirius.py

This is a simple interface to a collection of classes which
serialize Python objects to XML and back.

The system is very lightweight and was not intended for complex XML

Usage:
  xmlString = Sirius.serialize( pythonObj )
  pythonObj = Sirius.deserialize( xmlString )
'''

# from XML2Py import XML2Py
# from Py2XML import Py2XML
import Queue
from EaseXML import *

# def deserialize( xmlString ):
#     deserializer = XML2Py()
#     return deserializer.parse( xmlString )
#
# def serialize( pyObject, root=None ) :
#     serializer = Py2XML()
#     return serializer.parse( pyObject, root )
import time
from connection.s3_connection import S3Connection
from models.xml_classes.change_resource_record_sets_request import \
    ChangeResourceRecordSetsRequest


class Labels(XMLObject):
    labels = ListNode(u'label')


class label(XMLObject):
    id = StringAttribute()
    added = StringAttribute(u'added')
    _nodesOrder = [u'name', u'address', u'quote']
    name = TextNode()
    address = ItemNode(u'address')
    quote = ItemNode(u'quote', optional=True)


class address(XMLObject):
    _nodesOrder = [u'street', u'city', u'state']
    street = TextNode()
    city = TextNode()
    state = TextNode()


class quote(XMLObject):
    _name = u'quote'
    content = ChoiceNode(['#PCDATA', 'emph'], optional=True,
                         main=True, noLimit=True)
    emph = TextNode(optional=True)


def main():
    test_xml = """<?xml version="1.0" encoding="iso-8859-1"?>
<labels>
  <label id="tse" added="2003-06-20">
    <name>Thomas Eliot</name>
    <address>
      <street>3 Prufrock Lane</street>
      <city>Stamford</city>
      <state>CT</state>
    </address>
    <quote>
      <emph>Midwinter Spring</emph> is its own season&#8230;
    </quote>
  </label>
  <label id="ep" added="2003-06-10">
    <name>Ezra Pound</name>
    <address>
      <street>45 Usura Place</street>
      <city>Hailey</city>
      <state>ID</state>
    </address>
    <quote>
      What thou lovest well remains, the rest is dross&#8230;
    </quote>
  </label>
  <!-- Throw in 10,000 more records just like this -->
  <label id="lh" added="2004-11-01">
    <name>Langston Hughes</name>
    <address>
      <street>10 Bridge Tunnel</street>
      <city>Harlem</city>
      <state>NY</state>
    </address>
  </label>
</labels>"""

    test_xml1 = """<?xml version="1.0" encoding="UTF-8"?>
<ChangeResourceRecordSetsRequest xmlns="https://route53.amazonaws.com/doc/2013-04-01/">
<ChangeBatch>
   <Comment>optional comment about the changes in this
      change batch request</Comment>
   <Changes>
      <Change>
         <Action>CREATE | DELETE | UPSERT</Action>
         <ResourceRecordSet>
            <Name>DNS domain name</Name>
            <Type>DNS record type</Type>
            <SetIdentifier>unique description for this
               resource record set</SetIdentifier>
            <Weight>value between 0 and 255</Weight>
            <AliasTarget>
               <HostedZoneId>hosted zone ID for your
                  CloudFront distribution, Amazon S3 bucket,
                  Elastic Load Balancing load balancer,
                  or Amazon Route 53 hosted zone</HostedZoneId>
               <DNSName>DNS domain name for your
                  CloudFront distribution, Amazon S3 bucket,
                  Elastic Load Balancing load balancer,
                  or another resource record set
                  in this hosted zone</DNSName>
               <EvaluateTargetHealth>true | false</EvaluateTargetHealth>
            </AliasTarget>
            <HealthCheckId>optional ID of a
               Amazon Route 53 health check</HealthCheckId>
         </ResourceRecordSet>
      </Change>
      ...
   </Changes>
</ChangeBatch>
</ChangeResourceRecordSetsRequest>
"""
    record = ChangeResourceRecordSetsRequest.fromXml(test_xml1)

    doc = Labels.fromXml(test_xml)
    for label in doc.labels:
        print label.id

    l = Labels()
    l.toXml()

    # test_xml = '''
    # <documents>
    #   <document date="June 6, 2009" title="The Newness of Python" author="John Doe">
    #     <copyright type="CC" url="http://www.creativecommons.org/" date="June 24, 2009" />
    #     <text>Python is very nice. Very, very nice.</text>
    #     <formats>
    #       <format type="pdf">
    #         <info uri="http://www.python.org/newness-of-python.pdf" pages="245" />
    #       </format>
    #       <format type="web">
    #         <info uri="http://www.python.org/newness-of-python.html" />
    #       </format>
    #     </formats>
    #   </document>
    # </documents>
    # '''
    #
    # # This is not for use, just to see how XML compares to Python
    # data_output = '''
    # {'documents': [
    #       { 'title': 'The Newness of Python',
    #         'date': 'June 6, 2009',
    #         'author': 'John Doe',
    #         'copyright': {
    #             'url': 'http://www.creativecommons.org/',
    #             'date': 'June 24, 2009',
    #             'type': 'CC'},
    #         'text': ['Python is very nice. Very, very nice.'],
    #         'formats': [
    #             {   'type': 'pdf',
    #                 'info': {
    #                     'uri': 'http://www.python.org/newness-of-python.pdf',
    #                     'pages': '245'}
    #             },
    #             { 'type': 'web',
    #                 'info': {
    #                     'uri': 'http://www.python.org/newness-of-python.html'}
    #             }
    #         ]
    #       }
    #   ]
    # }
    #
    # '''
    #
    # print test_xml
    # deserialized1 = deserialize( test_xml )
    # #print deserialized1
    # serialized1 = serialize( deserialized1 )
    # #print serialized1
    # deserialized2 = deserialize( serialized1 )
    # print deserialized2
    # serialized2 = serialize( deserialized2 )
    # print serialized2
    #
    # # compare using Python data structures
    # if deserialized1 == deserialized2:
    #     print "They are equal"


class SuperClass(XMLObject):
    class_name = None


class SubClass1(SuperClass):
    class_name = '1'


class SubClass2(SuperClass):
    class_name = '2'


class SubClass3(SuperClass):
    class_name = '3'


if __name__ == '__main__':
    import matplotlib.pyplot as plt
    # plt.plot([10, 46, 57, 53, 96, 84, 69, 32, 76, 75, 75, 41, 81, 72, 82, 87, 75, 88, 81, 71, 78, 73, 86],
    #          [0.63596104468606618, 0.53382497842738474, 0.44665312050855638,
    #           0.50425042179148949, 0.59940747153615193, 0.43193619437859054,
    #           0.30932259318304062, 0.509965104692778, 0.42435147551362551,
    #           0.42763853503989019, 0.34476941912023856, 0.42775079951245287, 0.44366271156871123, 0.433875409317387, 0.43874053324869589, 0.46013443978049479, 0.49944519850463537, 0.47975126542558055, 0.4838644743428086, 0.45508512584449157, 0.41110725268916543, 0.45449157989237793, 0.40021804803670719],
    #          'o')
    # plt.show()

    plt.plot([8, 35, 29, 50, 51, 30],
             [0.58125925094046071, 0.74447566950239996, 0.83113617056952838,
              0.69228760533235711, 0.57027730844784785, 0.50826348265944499],
             'o')
    plt.show()
    # para_dict = {'tm_year': 2014,
    #              'tm_mon': 7,
    #              'tm_mday': 1,
    #              'tm_hour': 9,
    #              'tm_min': 25,
    #              'tm_sec': 48,
    #              'tm_wday': 1,
    #              'tm_yday': 182,
    #              'tm_isdst': -1}
    # test = time.struct_time(kwargs=para_dict)
    # print test

    # queue = Queue.Queue()
    # queue.put(123)
    # queue.put(456)
    # for job in iter(queue.get, None):
    #     print job

    # bucket_name = u'xueshi-ireland-elb-logs'
    # c = S3Connection()
    # bucket = c.get_bucket(bucket_name)
    #
    # # keys = bucket.get_all_keys()
    # # for key in keys:
    # #     print "{name}\t{size}\t{modified}".format(
    # #         name=key.name,
    # #         size=key.size,
    # #         modified=key.last_modified,
    # #     )
    #
    # # key = bucket.get_key(u'AWSLogs/305933725014/elasticloadbalancing/'
    # #                      u'eu-west-1/2014/07/21/305933725014_'
    # #                      u'elasticloadbalancing_eu-west-1_'
    # #                      u'xueshi-ofbench-servers_'
    # #                      u'20140721T2115Z_54.228.193.7_5nrglkcr.log')
    #
    # response_headers = {'prefix': u'AWSLogs/305933725014/elasticloadbalancing/'
    #                               u'eu-west-1/2014/07/21/305933725014_'
    #                               u'elasticloadbalancing_eu-west-1_'
    #                               u'xueshi-ofbench-servers_'
    #                               u'20140721T2115Z_54.228.193.7',
    #                     'delimiter': '.log'}
    #
    # list_bucket_results = bucket.search_key(parameters=response_headers)
    #
    # key_name = list_bucket_results.common_prefixes.prefix
    #
    # key = bucket.get_key(key_name=key_name)
    #
    # """
    # AWSLogs/305933725014/elasticloadbalancing/eu-west-1/2014/07/21/
    # 305933725014_elasticloadbalancing_eu-west-1_xueshi-ofbench-servers_
    # 20140721T2115Z_54.228.193.7_5nrglkcr.log
    #
    # {Bucket}/{Prefix}/AWSLogs/{AWS AccountID}/elasticloadbalancing/{Region}/
    # {Year}/{Month}/{Day}/{AWS Account ID}_elasticloadbalancing_{Region}_
    # {Load Balancer Name}_{End Time}_{Load Balancer IP}_{Random String}.log
    #
    # """
    #
    # with open('test1.log', 'w') as fp:
    #     key.get_contents_to_file(fp)
    #
    # # for key in bucket.list():
    # #     print "{name}\t{size}\t{modified}".format(
    # #         name=key.name,
    # #         size=key.size,
    # #         modified=key.last_modified,
    # #     )
    #
    # all_subclass = SuperClass.__subclasses__()
    # print 'done'
    #main()